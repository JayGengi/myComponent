apply plugin: 'com.android.library'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
//    implementation "com.android.support:appcompat-v7:${rootProject.ext.android["buildToolsVersion"]}"
}
def sdk_appendix = "baselib"
def sdk_baseName = "component"
def sdk_version = "0.0.3"

task buildJar(dependsOn: ['compileReleaseJavaWithJavac'], type: Jar) {

    appendix = sdk_appendix
    baseName = sdk_baseName
    version = sdk_version
    //classifier = "release"
    //后缀名
    extension = "jar"
    //最终的Jar 包名 ， 如果没设置 ， 默认为[baseName] - [appendix] - [version] - [classifier].[extension]

    // 需打包的资源所在的路径集
    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"]
    //初始化资源路径集
    from srcClassDir

    //排除这两个文件
    include("com/jaygengi/**/*.class")
    exclude("com/jaygengispt/component/componentlib/BuildConfig.class",
            "com/jaygengispt/component/componentlib/R.class",
            "com/jaygengispt/component/componentlib/R\$*.class")
}

task buildJarAndCopy(dependsOn: "buildJar", type: Copy) {
    from(project.buildDir.absolutePath + "/libs")
    include(sdk_baseName + "-" + sdk_appendix + "-" + sdk_version + ".jar")
    into("release")
}
repositories {
    mavenCentral()
}